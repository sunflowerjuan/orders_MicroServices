services:
  #-----API-GATEWAY------------
  eureka-server:
    build: ./api-gateway/eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    profiles: ["gateway"]
    networks:
      - appnet
  cloud-gateway:
    build: ./api-gateway/cloud-gateway
    container_name: cloud-gateway
    environment:
      EUREKA_HOST: eureka-server
      EUREKA_PORT: 8761
      SPRING_APPLICATION_NAME: api-gateway
      KEY: ${KEY}
    ports:
      - "80:8080"
    depends_on:
      eureka-server:
        condition: service_started
    profiles: ["gateway"]
    networks:
      - appnet
  #-----LOGIN MICROSERVICE------------
  mysql-db:
    image: mysql:8
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: login_db
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - login_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["services"]
    networks:
      - appnet

  login-service:
    build: ./auth-service
    container_name: login-service
    environment:
      DB_HOST: mysql-db
      DB_NAME: login_db
      DB_USER: ${MYSQL_USER}
      DB_PASS: ${MYSQL_PASSWORD}
      EUREKA_HOST: eureka-server
      EUREKA_PORT: 8761
      KEY: ${KEY}
    ports:
      - "3000:3000"
    depends_on:
      mysql-db:
        condition: service_healthy
    profiles: ["services"]
    networks:
      - appnet
  #-----CUSTOMER MICROSERVICE------------
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_DB: CustomerDB
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - customer_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d customer_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["services"]
    networks:
      - appnet

  customer-service:
    build: ./customer-service
    container_name: customer-service
    environment:
      DB_HOST: postgres-db
      DB_NAME: CustomerDB
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      EUREKA_HOST: eureka-server
      EUREKA_PORT: 8761
      DB_PORT: 5432
    ports:
      - "8082:8082"
    depends_on:
      postgres-db:
        condition: service_healthy
    profiles: ["services"]
    networks:
      - appnet
  #-----ORDER MICROSERVICE------------
  mongo-db:
    image: mongo:6
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["services"]
    networks:
      - appnet

  order-service:
    build: ./orders-service
    container_name: order-service
    environment:
      EUREKA_HOST: eureka-server
      EUREKA_PORT: 8761
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo-db:27017/${MONGO_INITDB_DATABASE}?authSource=admin
    ports:
      - "8083:8083"
    depends_on:
      mongo-db:
        condition: service_healthy
    profiles: ["services"]
    networks:
      - appnet
volumes:
  login_data:
  customer_data:
  mongo_data:
networks:
  appnet:
    driver: bridge
